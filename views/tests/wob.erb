<style>
  .screen-wrapper {
    position: relative;
    width: 512px;
    height: 512px;
    overflow: hidden;
  }

  #screen {
    transform: scale3d(2, 2, 2);
    transform-origin: 0 0;
  }
</style>

<div>
  <div id='test'>Controls: D - forward, left / right arrows - change angle, up / down arrows - zoom in / out</div>
  <div class='screen-wrapper'>
    <canvas id='screen' height='256' width='256'></canvas>
  </div>

  <div class='screen-wrapper' style='display: none;'>
    <canvas id='raw_screen' height='4096' width='4096'></canvas>
  </div>
</div>

<script>
    var wob = JSON.parse('<%= @wob.to_json %>'),
        tile_assembly = wob.graphics.splice(0, 1024),
        palette_indexes = wob.graphics.splice(-128, 128),
        graphics = wob.graphics,
        palettes = wob.palettes,
        map_data = wob.tiles;

    var ctx = document.querySelector("#screen").getContext('2d'),
        raw = document.querySelector("#raw_screen").getContext('2d'),

        ctxDataObj = ctx.getImageData(0, 0, 256, 256),
        ctxData = ctxDataObj.data,
        rawDataObj = raw.getImageData(0, 0, 4096, 4096),
        rawData = rawDataObj.data;

    for (var x=0; x<256; x++){
      for (var y=0; y<256; y++){
        var tile = map_data[x + (y << 8)]
        
        for (var i=0; i<4; i++){
          var chunk = tile_assembly[i + (tile * 4)],
              x_offset = (i % 2) * 8,
              y_offset = ((i / 2) | 0) * 8,
              palette_index = (chunk % 2 === 1) ? (palette_indexes[(chunk / 2) | 0] & 240) >> 4 : palette_indexes[(chunk / 2) | 0] & 15

          for (var j=0; j<64; j++){
            var pixel = graphics[(chunk * 32) + ((j / 2) | 0)],
                color_index = (j % 2 === 0) ? ( pixel & 240) >> 4 : pixel & 15,
                color = palettes[palette_index][color_index];

            var index = ((x * 16) + (y * 65536) + (x_offset + (j % 8)) + ((y_offset + ((j / 8) | 0)) * 4096)) * 4;

            rawData[index] = color[0];
            rawData[index + 1] = color[1];
            rawData[index + 2] = color[2];
            rawData[index + 3] = color[3];
          }
        }
      }
    }

    //ctx.putImageData(ctxDataObj, 0, 0);
    raw.putImageData(rawDataObj, 0, 0)

    var test = document.querySelector("#test");

    var offset = {
          x: 0,
          y: 2048
        }

    var perspective = {
          horizon: -125,
          fov: 300,
          scaling: 300,
          angle: 0
        }

    function draw(){
      var c = ctx,
          rData = rawData,
          cData = ctxData,
          cDataObj = ctxDataObj,
          o = offset,
          p = perspective;

      function loop(timing) {
        var cos = Math.cos(p.angle),
            sin = Math.sin(p.angle);

        for (var y=64; y<256; y++){
          for (var x=0; x<256; x++){
            var coords = calc_perspective(x - 128, y - 128, cos, sin);
            

            var data_index = ((coords[0] + o.x) * 4) + ((coords[1] + o.y) * 4096 * 4),
                screen_index = (x * 4) + (y * 1024);

            cData[screen_index] = rData[data_index];   
            cData[screen_index + 1] = rData[data_index + 1];   
            cData[screen_index + 2] = rData[data_index + 2];   
            cData[screen_index + 3] = rData[data_index + 3];   
          }
        }

        c.putImageData(cDataObj, 0, 0)

        //test.innerHTML = (window.performance.now() - timing) | 0;
        window.requestAnimationFrame(loop);
      }

      function calc_perspective(x, y, c, s){
        var px = x,
            py = y - p.horizon - p.fov, 
            pz = y - p.horizon;      

        var sx = px / pz,
            sy = py / pz; 

        var scaledX = (sx * p.scaling), 
            scaledY = (sy * p.scaling);  

        var rotatedX = scaledX * c - scaledY * s,
            rotatedY = scaledX * s + scaledY * c;

        return [rotatedX | 0, rotatedY | 0]
      }

      loop();
    }

    draw()

    window.addEventListener("keydown", function(e){
      if (e.keyCode === 37){
        perspective.angle -= 0.1;
      } else if (e.keyCode === 38){
        perspective.scaling -= 5;
      } else if (e.keyCode === 39){
        perspective.angle += 0.1;
      } else if (e.keyCode === 40){
        perspective.scaling += 5;
      } else if (e.keyCode === 68){
        offset.x += Math.round(Math.sin(perspective.angle) * 16);
        offset.y -= Math.round(Math.cos(perspective.angle) * 16);
      } else {
        console.log(e.keyCode);
      }
    }, false)
</script> 