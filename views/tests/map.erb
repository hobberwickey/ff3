<div>
  <div id='drawTime'></div>
  <div id='stop'><a href='javascript:void(0)'>Pause</a></div>
  <div id='up'><a href='javascript:void(0)'>Up</a></div>
  <div id='left'><a href='javascript:void(0)'>Left</a></div>
  <div id='down'><a href='javascript:void(0)'>Down</a></div>
  <div id='right'><a href='javascript:void(0)'>Right</a></div>
  <div id='priority'><a href='javascript:void(0)'>Toggle Priority</a></div>
  
  <div id='screen_wrapper' style='position: relative; width: 512px; height: 512px; margin: -100px auto 0 auto; overflow: hidden;'>
    <div id='props' style='position: absolute; width: 512px;'></div>
    <canvas moz-opaque id='screen' width='256' height='256' style='background-color: #fff; transform: scale3d(2, 2, 2); transform-origin: 0 0;'></canvas>
  </div>
  
  <script>
    document.getElementById('stop').addEventListener("click", function(){
      if (PAUSED === true){
        PAUSED = false;
        loop();
      } else {
        PAUSED = true;
      }
    }, false)

    document.getElementById('up').addEventListener("click", function(){
      CHARACTER.coords.y -= 1;
      if (scrollPos.y > 0) scrollPos.y -= 1;
    }, false)

    document.getElementById('left').addEventListener("click", function(){
      CHARACTER.coords.x -= 1;
      if (scrollPos.x > 0) scrollPos.x -= 1;
    }, false)

    document.getElementById('down').addEventListener("click", function(){
      CHARACTER.coords.y += 1;
      if (scrollPos.y < DIMENSIONS[0].y - 1) scrollPos.y += 1;
    }, false)

    document.getElementById('right').addEventListener("click", function(){
      CHARACTER.coords.x += 1;
      if (scrollPos.y < DIMENSIONS[0].x - 1) scrollPos.x += 1;
    }, false)

    document.getElementById('priority').addEventListener("click", function(){
      CHARACTER.priority = !CHARACTER.priority | 0
    }, false)
  </script>

  <script>
    var PALETTE = JSON.parse('<%= @map.palette.to_json %>'),
        TILES = JSON.parse('<%= @map.tiles.to_json %>'),
        MAP_DATA = JSON.parse('<%= @map.layer_data.to_json %>'),
        DIMENSIONS = JSON.parse('<%= @map.info.dimensions.to_json %>'),
        SPRITES = JSON.parse('<%= @map.sprite_info.sprites.to_json %>'),
        CHARACTER = JSON.parse('<%= @map.sprite_info.character.to_json %>'),
        TILE_PROPERTIES = JSON.parse('<%= @map.tile_properties.to_json %>'),
        LAYER_PRIORITIES = JSON.parse('<%= @map.info.layer_priorities %>'),
        X_SHIFT = JSON.parse('<%= @map.info.x_shift.to_json %>'),
        Y_SHIFT = JSON.parse('<%= @map.info.y_shift.to_json %>'),
        EFFECTS = JSON.parse('<%= @map.info.effects.to_json %>'),
        PAUSED = false,

        SPRITE_POSITIONS = JSON.parse('<%= @map.sprite_info.sprite_positions.to_json %>'),
        MAP_VIEWABLE_SIZE = [<%= @map.map_info.map_viewable_size[:x] %>, <%= @map.map_info.map_viewable_size[:y] %>];
        PHYSICAL_MAP = {};

    var tile_props = document.getElementById("props");
    var ctx, dataObj, data, layers, scrollPos, scrollSpeed, animated_frame;
    var scrollL = scrollR = scrollU = scrollD = false;

    // document.addEventListener("polymer-ready", function(){
    var ctx = document.querySelector("#screen").getContext("2d"),
        dataObj = ctx.getImageData(0,0,256,256),
        data = dataObj.data;

    if (TILES[2].length === 0){
      var layers = [
          { data: TILES[0].p, index: 0, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 0 },
          { data: TILES[1].p, index: 1, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 1 },
          { data: TILES[0].r, index: 0, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 2 },
          { data: TILES[1].r, index: 1, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 3 }
        ]
    } else {
      var layers = [
          { data: TILES[2], index: 2, x: 0, x_offset: 0, y: Y_SHIFT[1], y_offset: 0, priority: 0 },
          { data: TILES[0].p, index: 0, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 0 },
          { data: TILES[1].p, index: 1, x: X_SHIFT[1], x_offset: 0, y: Y_SHIFT[0], y_offset: 0, priority: 1 },
          { data: TILES[0].r, index: 0, x: 0, x_offset: 0, y: 0, y_offset: 0, priority: 2 },
          { data: TILES[1].r, index: 1, x: X_SHIFT[1], x_offset: 0, y: Y_SHIFT[0], y_offset: 0, priority: 3 }
        ]
    }

    var scrollPos = {
        x: 0,
        y: 0,
        x_offset: 0,
        y_offset: 0
      }

    var pixelMap = []
    for (var i=0; i<256; i++){
      pixelMap[i] = [];
      for (var j=0; j<256; j++){
        pixelMap[i][j] = { priority: 0, trans: 0 };
      }
    }

    var transMap = []
    for (var i=0; i<256; i++){
      transMap[i] = [];
      for (var j=0; j<256; j++){
        transMap[i][j] = { priority: 0, trans: 0 };
      }
    }

    var animated_frame = 0;

    every(8, function(){
      animated_frame++;
      if (animated_frame >= 4) animated_frame = 0;
    }, false)

    // every(2, function(){
    //   layers[0].x_offset += 1;
    //   if (layers[0].x_offset > 15){
    //     layers[0].x += 1;
    //     layers[0].x_offset = 0;

    //     if (layers[0].x > DIMENSIONS[2].x - 1){
    //       layers[0].x = 0;
    //     }
    //   }
    // }, false)

    // every(1, function(){
    //   layers[0].y_offset += 1;
    //   if (layers[0].y_offset > 15){
    //     layers[0].y += 1;
    //     layers[0].y_offset = 0;

    //     if (layers[0].y > DIMENSIONS[2].y - 1){
    //       layers[0].y = 0;
    //     }
    //   }
    // }, false)
    

    var test = document.querySelector("#drawTime");
  
    //var start = Date.now();
    var timing = [ 
      window.performance.now(), // start time
      0, // frames
      0, // last draw
      0  // advanced
    ]

    function loop(timestamp) {
      //if (Date.now() - start > fps){ //24 FPS
        var t = timing;

        ctx.putImageData(dataObj, 0, 0)

        checkActions();
        drawMap();
        drawSprites();

        t[1] = (timestamp - t[0]) >> 4;
        t[3] = t[1] - t[2];
        t[2] = t[1];

        test.innerHTML = ((window.performance.now() - timestamp) | 0) + " milliseconds to draw frame "// + t[3];
        
      //}
      if (!PAUSED) window.requestAnimationFrame(loop);
    }

    buildPhysicalMap();
    setupSpriteMovement();
    loop();
    
    function empty(){
      //DO NOTHING
    }



    function drawMap(){
      //var start = Date.now();

      var layers_len = window.layers.length,
          map_size = window.DIMENSIONS,
          m_data = window.MAP_DATA,
          palette = window.PALETTE,
          pMap = window.pixelMap,
          tMap = window.transMap,
          sPos = window.scrollPos,
          blank = new Array(4),
          a_frame = animated_frame,
          d = window.data;                   


      for (var y=0; y<256; y++){
        for (var x=0; x<256; x++){
          
          var pixel = blank,
              index = (x << 2) + (y << 10),
              transColor = 0;
          
          for (var z=0; z<layers_len; z++){
            var layer = layers[z],
                layer_index = layer.index;

            var pixel_x = x + sPos.x_offset + layer.x_offset,
                pixel_y = y + sPos.y_offset + layer.y_offset,
                
                map_x = (((sPos.x << 4) + pixel_x + (layer.x << 4)) >> 4) & (map_size[layer_index].x - 1),
                map_y = (((sPos.y << 4) + pixel_y + (layer.y << 4)) >> 4) & (map_size[layer_index].y - 1),
                
                pixel_offset = (pixel_x & 15) + ((pixel_y & 15) << 4);
                
            var map_index = map_x + (map_y * map_size[layer_index].x),
                tile_index = m_data[layer_index][map_index];
            
            var tile_data =  layer.data[tile_index]; //layer.data[i]; 
            
            var animated_offset = pixel_offset + (a_frame << 8),
                color_index = tile_data[animated_offset] === void(0) ? tile_data[pixel_offset] : tile_data[animated_offset];
            
            pixel = palette[color_index];
            
            if (pixel[3] !== 0 && layer_index === 2){
              transColor = pixel;
              continue;
            }

            if (pixel[3] !== 0){ 
                if (transColor !== 0){
                  pixel = addColors(pixel, transColor);
                }
                
                pMap[x][y] = layer.priority;
                tMap[x][y] = transColor;
                transColor = 0;
                break;
            }
          }
        
          drawPixel(d, pixel, index)
        }
      }
      // for (var i=0; i<256; i++){
      //   var x_offset = (i & 15) << 4,
      //       y_offset = (i >> 4) << 4
        
      //   for (var j=0; j<256; j++){
      //     var x = (j & 15) + x_offset,
      //         y = (j >> 4) + y_offset;

      //     var pixel = [0, 0, 0, 0], 
      //         index = (x << 2) + (y << 10),
      //         transColor = 0;
          
      //     for (var z=0; z<layers_len;z++){
      //       var layer = layers[z],
      //           layer_index = layer.index;

      //       var overflow_x = ((j & 15) + layer.x_offset + sPos.x_offset > 15) | 0,
      //           overflow_y = (j + ((layer.y_offset + sPos.y_offset) << 4) > 255) | 0,
      //           pixel_offset = (j + layer.x_offset + sPos.x_offset + ((layer.y_offset + sPos.y_offset) << 4)) - (overflow_x << 4) - (overflow_y << 8);


      //       var map_x = (((x_offset + (layer.x << 4)) >> 4) + sPos.x + overflow_x) & (map_size[layer_index].x - 1),
      //           map_y = (((y_offset + (layer.y << 4)) >> 4) + sPos.y + overflow_y) & (map_size[layer_index].y - 1);
            
      //       var map_index = map_x + (map_y * map_size[layer_index].x),
      //           tile_index = m_data[layer_index][map_index],
      //           tile_data =  layer.data[tile_index]; //layer.data[i]; 
      //     //try{
      //       var animated_offset = pixel_offset + (animated_frame << 8),
      //           color_index = tile_data[animated_offset] === void(0) ? tile_data[pixel_offset] : tile_data[animated_offset];
      //     //} catch(e){
      //     //  console.log(map_index)
      //     //  throw "ERROR"
      //     //}
          
      //       pixel = palette[color_index];
      //     if (!pixel && pixel !== 0){
      //       console.log(map_x, sPos.x, color_index)
      //       throw "ERROR"
      //     }
            
      //       if (pixel[3] !== 0){ 
      //         if ((layer_index & 2) !== 0){
      //           transColor = pixel;
      //         } else {
      //           if (transColor !== 0){
      //             pixel = addColors(pixel, transColor);
      //           }
                
      //           pMap[x][y] = layer.priority;
      //           tMap[x][y] = transColor;
      //           transColor = 0;
      //           break;
      //         }
      //       }
      //     }
        
      //     drawPixel(d, pixel, index)
      //   }
      // }
    }

    function addColors(o, n){
      var alpha = 0.5,
          arr = new Array(4);
      
      
      arr[0] = alpha * n[0] + alpha * o[0];
      arr[1] = alpha * n[1] + alpha * o[1];
      arr[2] = alpha * n[2] + alpha * o[2];
      arr[3] = 255;
      
      return arr;
          
      // results[0] = alpha * n[0] + alpha * o[0];
      // results[1] = alpha * n[1] + alpha * o[1];
      // results[2] = alpha * n[2] + alpha * o[2];
      // results[3] = 255;

      // return results;
    }

    function drawSprites(){
      // TODO: This will need to be broken up into subroutines so that sprites can be drawn according to priority
      // to get the layering exact.
      
      var _sprites = SPRITES,
          _scrollPos = scrollPos,
          _spritePositions = SPRITE_POSITIONS,
          _pMap = PHYSICAL_MAP;

      var mapBounds = {
        x1: (_scrollPos.x << 4) + _scrollPos.x_offset,
        x2: (_scrollPos.x << 4) + _scrollPos.x_offset + 256,
        y1: (_scrollPos.y << 4) + _scrollPos.y_offset,
        y2: (_scrollPos.y << 4) + _scrollPos.y_offset + 256
      }

      for (var i=0; i<_sprites.length; i++){
        drawCharacter(_sprites[i], mapBounds, _spritePositions, _pMap);
      }

      drawCharacter(CHARACTER, mapBounds, _spritePositions, _pMap);
    }

    function drawCharacter(sprite, mapBounds, sprite_positions, pMap){
      if (sprite.coords.x === 0 || sprite.coords.y === 0) return;

      var back_edge = (sprite.coords.x << 4) + sprite.coords.x_offset,
          top_edge =  ((sprite.coords.y - 1) << 4) + sprite.coords.y_offset,
          spritePos = sprite_positions[sprite.position],
          tMap = window.transMap;

      for (var b=0; b<6; b++){
        var x_offset = (b & 1) << 3,
            y_offset = (b >> 1) << 3; 

        for (var y=0; y<8; y++){
          for (var x=0; x<8; x++){
            var color = sprite.tiles[spritePos[b]][x + (y << 3)],
                x_pixel = sprite.mirror === 0 ? x + x_offset : 15 - (x + x_offset),
                data_x = (back_edge - mapBounds.x1) + x_pixel,
                data_y = (y + (top_edge - mapBounds.y1)) + y_offset;

            var dpTile = pMap[(back_edge + x_pixel) >> 4][(top_edge + y + 16) >> 4],
                mpTile = pMap[(back_edge + x_pixel) >> 4][(top_edge + y + y_offset) >> 4],
                mask = sprite.priority === 0 && mpTile.mask === 1,
                layer = b < 4 ? (sprite.priority === 0 ? (dpTile.drawPriority > 1) | 0 : (dpTile.drawPriority > 0) | 0) : 0;
          
            if (data_x < 0 || data_y < 0 || data_x > 255 || data_y > 255) continue;
            if (color[3] === 0) continue
            
            var data_offset = ((data_x) + ((data_y) * 256)) * 4;


            if (layer === 0 || mask){ 
              if (mask){
                //if (pixelMap[data_x][data_y] === 2) drawPixel(data, color, data_offset)
              } else {
                if (pixelMap[data_x][data_y] !== 1 && pixelMap[data_x][data_y] !== 0){ 
                  if (tMap[data_x][data_y] !== 0) color = addColors(color, tMap[data_x][data_y])
                  drawPixel(data, color, data_offset)
                }
              }
            } else {
              if (tMap[data_x][data_y] !== 0) color = addColors(color, tMap[data_x][data_y])
              drawPixel(data, color, data_offset)
            } 
          }
        }
      }
    }

    //TODO: be able to set width. Needed for mode7
    function drawPixel(data, pal, index){
      data[index] = pal[0]
      data[index + 1] = pal[1]
      data[index + 2] = pal[2]
      data[index + 3] = pal[3]

      // data[index + 4] = pal[0]
      // data[index + 5] = pal[1]
      // data[index + 6] = pal[2]
      // data[index + 7] = pal[3]

      // data[index + 2048] = pal[0]
      // data[index + 2049] = pal[1]
      // data[index + 2050] = pal[2]
      // data[index + 2051] = pal[3]

      // data[index + 2052] = pal[0]
      // data[index + 2053] = pal[1]
      // data[index + 2054] = pal[2]
      // data[index + 2055] = pal[3]
    }

    window.addEventListener("keydown", function(e){
      if (e.keyCode === 37){
        moveLeft(); scrollL = true;
      } else if (e.keyCode === 38) {
        moveUp(); scrollU = true;
      } else if (e.keyCode === 39) {
        moveRight(); scrollR = true;
      } else if (e.keyCode === 40) {
        moveDown(); scrollD = true;
      }
    }, false)

    var toggle = true;  
    window.addEventListener("keyup", function(e){
      if (e.keyCode === 37){
        scrollL = false;
      } else if (e.keyCode === 38) {
        scrollU = false;
      } else if (e.keyCode === 39) {
        scrollR = false;
      } else if (e.keyCode === 40) {
        scrollD = false;
      } else if (e.keyCode === 49) {
        ctx.canvas.style.display = toggle ? 'none' : 'block';
        toggle = !toggle; 
      }
    }, false)
    // })

    function scrollLeft(speed){
      var s = scrollPos;
      
      s.x -= 1;
      s.x_offset = 15;
      tile_props.style.marginLeft = (s.x * -32) + "px";
      

      iterate(1, 14, function(){
        s.x_offset -= 1
      }, function(){ 
        s.x_offset = 0; 
      }, false)
    }

    function scrollRight(speed){
      iterate(1, 15, function(){
        scrollPos.x_offset += 1;
      }, function(){ 
        scrollPos.x_offset = 0;
        scrollPos.x += 1; 
        tile_props.style.marginLeft = (scrollPos.x * -32) + "px";
      }, true)
    }

    function scrollUp(){
      var s = scrollPos;
      
      s.y -= 1;
      s.y_offset = 15;
      tile_props.style.marginTop = (scrollPos.y * -32)  + "px";
      
      iterate(1, 14, function(){
        s.y_offset -= 1
      }, function(){ 
        s.y_offset = 0; 
      }, false)
    }

    function scrollDown(){
      iterate(1, 15, function(){
        scrollPos.y_offset += 1;
      }, function(){ 
        scrollPos.y_offset = 0;
        scrollPos.y += 1; 
        tile_props.style.marginTop = (scrollPos.y * -32) + "px";
      }, true)
    }
  </script>
</div>