<div>
  <div id='drawTime'></div>
  <div><a id='pause' href='javascript:void(0)'>Pause</a></div>
  <div><a id='ripple' href='javascript:void(0)'>Toggle Ripple</a></div>

  <div><a id='next_bg' href='javascript:void(0)'>Next BG</a></div>
  <div><a id='previous_bg' href='javascript:void(0)'>Previous BG</a></div>
  
  <div class='palette'>
    <span id='pal'>Palette 0</span>
    <a href='javascript:void(0)' class='down'>&lt;</a>
    <a href='javascript:void(0)' class='up'>&gt;</a>
  </div>

  <div id='screen_wrapper' style='position: relative; width: 512px; height: 512px; margin: -50px auto 0 auto; overflow: hidden;'>
    <canvas id='screen' width='256' height='256' style='background-color: #00f; transform: scale(2); transform-origin: 0 0;'></canvas>
  </div>
  

  <script>
    var Effects = function(){
      this.effects = {}
    }

    Effects.prototype.ripple = function(){
      var effect = {
        data: [ 0, 0, 0, 1, 1, 0, 0, 0 ],
        fn: function(y){
          var offset = y % effect.data.length;
          if (effect.data[offset] === 1){ 
            return y - 1
          } else {
            return y
          }
        }.bind(this)
      }

      setInterval(function(){
        var item = effect.data[1];
        effect.data.splice(1, 1);
        effect.data.push(item);
      }.bind(this), 100)
    
      this.effects.ripple = effect;
    }

    var BATTLE = function(backgrounds){
      var PAUSED = false,
          RIPPLE = false;

      document.querySelector("#pause").addEventListener("click", function(){
        if (PAUSED === true){
          PAUSED = false;
          loop();
        } else {
          PAUSED = true;
        }
      }, false)

      document.querySelector("#ripple").addEventListener("click", function(){
        if (RIPPLE){
          RIPPLE = false;
          delete effect.effects.ripple
        } else {
          RIPPLE = true;
          effect.ripple();
        }
      }, false)

      document.querySelector("#next_bg").addEventListener('click', function(){
        INFO_INDEX += 1;
        if (INFO[INFO_INDEX] === void(0)) INFO_INDEX = 0;

        buildTiles();
      }, false);

      document.querySelector("#previous_bg").addEventListener('click', function(){
        INFO_INDEX -= 1;
        if (INFO[INFO_INDEX] === void(0)) INFO_INDEX = INFO.length - 1;

        buildTiles();
      }, false);

      document.querySelector('.palette .up').addEventListener("click", function(){
        PALETTE_INDEX += 1
        if (!PALETTES[PALETTE_INDEX + 2]) PALETTE_INDEX = 0
        buildTiles(PALETTE_INDEX);
      }, false);

      document.querySelector('.palette .down').addEventListener("click", function(){
        PALETTE_INDEX -= 1
        if (PALETTE_INDEX < 0) PALETTE_INDEX = PALETTES.length - 3
        buildTiles(PALETTE_INDEX);
        
      }, false);


      var BG = backgrounds,
          BG_DATA = BG.data,
          BG_DATA_INDEX = 0,
          PALETTES = BG.palettes,
          PALETTE_INDEX = 0,
          PALETTE_1 = 0,
          PALETTE_2 = 0,
          PALETTE_3 = 0,
          ASSEMBLY_DATA = BG.assembly,
          INFO = BG.info,
          INFO_INDEX = 0,
          TILES = [[],[],[]];

      // document.addEventListener("polymer-ready", function(){
      var ctx = document.querySelector("#screen").getContext("2d"),
          dataObj = ctx.getImageData(0,0,256,256),
          data = dataObj.data;

      var test = document.querySelector("#drawTime");

      var timing = [ 
        window.performance.now(), // start time
        0, // frames
        0, // last draw
        0  // advanced
      ]

      function buildTiles(pal_index){
        var info = INFO[INFO_INDEX],
            tilesets = [info[0] & 127, info[1] & 127, info[2] & 127];
        
        //This definitely shouldn't be here. 
        for (var i=0; i<3; i++){
          var tileset = BG_DATA[tilesets[i]];
          TILES[i] = [];
          if (tileset){
            for (var j=0; j<tileset.length; j++){
              TILES[i].push(tileset[j]);
            }
          }
        }

        PALETTE_INDEX = pal_index === void(0) ? (info[5] & 127) * 3 : pal_index;
        
        PALETTE_1 = PALETTES[PALETTE_INDEX];
        PALETTE_2 = PALETTES[PALETTE_INDEX + 1];
        PALETTE_3 = PALETTES[PALETTE_INDEX + 2];

        document.querySelector("#pal").innerHTML = "Palette " + PALETTE_INDEX;
      }

      var effect = new Effects();

      function drawBG(tiles){
        var tiles = TILES,
            info = INFO[INFO_INDEX];
      
        var pals = [PALETTE_1, PALETTE_2, PALETTE_3];

        var assembly1 = ASSEMBLY_DATA[info[3]],
            assembly2 = ASSEMBLY_DATA[info[4]];
        
        for (var yPos=0; yPos<152; yPos++){
          if (effect.effects.ripple !== void(0)){
            var _yPos = effect.effects.ripple.fn(yPos);
          } else {
            var _yPos = yPos;
          }

          for (var xPos=0; xPos<256; xPos++){  
            var x_offset = xPos >> 3,
                y_offset = yPos >> 3;
          
            var x = xPos & 7,
                y = yPos & 7,
                i = (y_offset << 5) + x_offset;

            var assembly = assembly1;

            var part1 = assembly[i * 2],
                part2 = assembly[(i * 2) + 1],
                tileset = (((part2 & 1) ) + ((part1 & 128) >> 7))
                tile_number = part1 & 127;
            
            var hFlip = (part2 & 64) === 64,
                vFlip = (part2 & 128) === 128;

            var tile = tiles[tileset][tile_number],
                palette_index = (((part2 & 12) - 1) >> 2),
                palette = pals[palette_index];
            

            if (!tile){
              tile = tiles[0][tile_number + 128]
              if (!tile) continue
            }

            var y_pos = vFlip ? 7 - y : y,
                x_pos = hFlip ? 7 - x : x;

            var index = (x_pos * 4) + (y_pos * 1024) + (x_offset * 32) + (y_offset * 8192),
                color = palette[tile[x + ((_yPos & 7) * 8)]];

            drawPixel(data, color, index);
          }
        }

        ctx.putImageData(dataObj, 0, 0)
      }

      var timing = [ 
        window.performance.now(), // start time
        0, // frames
        0, // last draw
        0  // advanced
      ]

      function loop(timestamp) {
        //if (Date.now() - start > fps){ //24 FPS
          var t = timing;

          drawBG();

          t[1] = (timestamp - t[0]) >> 4;
          t[3] = t[1] - t[2];
          t[2] = t[1];

          test.innerHTML = ((window.performance.now() - timestamp) | 0) + " milliseconds to draw frame "// + t[3];
          
        //}
        if (!PAUSED){ 
          window.requestAnimationFrame(loop);
        } else {
          test.innerHTML = "Paused";
        }
      }

      buildTiles();
      loop();
      
      //TODO: be able to set width. Needed for mode7
      function drawPixel(data, pal, index){
        data[index] = pal[0]
        data[index + 1] = pal[1]
        data[index + 2] = pal[2]
        data[index + 3] = pal[3]

        // data[index + 4] = pal[0]
        // data[index + 5] = pal[1]
        // data[index + 6] = pal[2]
        // data[index + 7] = pal[3]

        // data[index + 2048] = pal[0]
        // data[index + 2049] = pal[1]
        // data[index + 2050] = pal[2]
        // data[index + 2051] = pal[3]

        // data[index + 2052] = pal[0]
        // data[index + 2053] = pal[1]
        // data[index + 2054] = pal[2]
        // data[index + 2055] = pal[3]
      }
    }

    var Battle = new BATTLE(JSON.parse('<%= @battle.background.to_json %>'));
  
  </script>
</div>