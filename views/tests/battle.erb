<div>
  <div id='drawTime'></div>
  <div><a id='next_bg' href='javascript:void(0)'>Next BG</a></div>
  <div><a id='previous_bg' href='javascript:void(0)'>Previous BG</a></div>
  
  <div id='screen_wrapper' style='position: relative; width: 512px; height: 512px; margin: -50px auto 0 auto; overflow: hidden;'>
    <canvas id='screen' width='256' height='256' style='background-color: #00f; transform: scale(2); transform-origin: 0 0;'></canvas>
  </div>
  

  <script>
  var BG = JSON.parse('<%= @battle.background.to_json %>'),
      BG_DATA = BG.data,
      BG_DATA_INDEX = 0,
      PALETTES = BG.palettes,
      PALETTE_INDEX = 0,
      ASSEMBLY_DATA = BG.assembly,
      INFO = BG.info,
      INFO_INDEX = 0;

    // document.addEventListener("polymer-ready", function(){
    var ctx = document.querySelector("#screen").getContext("2d"),
        dataObj = ctx.getImageData(0,0,256,256),
        data = dataObj.data;

    document.querySelector("#next_bg").addEventListener('click', function(){
      INFO_INDEX += 1;
      if (INFO[INFO_INDEX] === void(0)) INFO_INDEX = 0;

      drawBG();
    }, false);

    document.querySelector("#previous_bg").addEventListener('click', function(){
      INFO_INDEX -= 1;
      if (INFO[INFO_INDEX] === void(0)) INFO_INDEX = INFO.length - 1;

      drawBG();
    }, false);

    var test = document.querySelector("#drawTime");

    function drawBG(){
      //TODO: Remove, this is just for clearing the canvas
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)
      dataObj = ctx.getImageData(0,0,256,256),
      data = dataObj.data;

      var tiles = [[],[],[]],
          lens = [];

      var info = INFO[INFO_INDEX]
      var tilesets = [info[0] & 127, info[1] & 127, info[2] & 127];
      
      for (var i=0; i<3; i++){
        var tileset = BG_DATA[tilesets[i]];
        if (!tileset){
          lens.push(0);
        } else {
          lens.push(tileset.length);
          for (var j=0; j<tileset.length; j++){
            tiles[i].push(tileset[j]);
          }
        }
      }

      var bg_data = BG_DATA,
          bg_data_index = BG_DATA_INDEX,
          palettes = PALETTES,
          palette_index = PALETTE_INDEX;

      var assembly1 = ASSEMBLY_DATA[info[3]],
          assembly2 = ASSEMBLY_DATA[info[4]];
          
      for (var i=0; i<608; i++){
        var assembly = assembly1;

        var part1 = assembly[i * 2],
            part2 = assembly[(i * 2) + 1],
            tileset = (((part2 & 1) ) + ((part1 & 128) >> 7))
            tile_number = part1 & 127;
        
        var hFlip = (part2 & 64) === 64,
            vFlip = (part2 & 128) === 128;

        var tile = tiles[tileset][tile_number],
            palette = palettes[((info[5] & 127) * 3) + (((part2 & 12) - 1) >> 2)],
            x_offset = (i % 32),
            y_offset = ((i / 32) | 0);
        
        if (!tile){
          tile = tiles[0][tile_number + 128]
          if (!tile) continue
        }

        for (var y=0; y<8; y++){
          var y_pos = vFlip ? 7 - y : y;

          for (var x = 0; x < 8; x++){
            var x_pos = hFlip ? 7 - x : x;

            var index = (x_pos * 4) + (y_pos * 1024) + (x_offset * 32) + (y_offset * 8192),
                color = palette[tile[x + (y * 8)]];

            drawPixel(data, color, index);
          }
        }
      }

      test.innerHTML = "BACKGROUND: " + INFO_INDEX;
      ctx.putImageData(dataObj, 0, 0)
    }

    drawBG();
    
    //TODO: be able to set width. Needed for mode7
    function drawPixel(data, pal, index){
      data[index] = pal[0]
      data[index + 1] = pal[1]
      data[index + 2] = pal[2]
      data[index + 3] = pal[3]

      // data[index + 4] = pal[0]
      // data[index + 5] = pal[1]
      // data[index + 6] = pal[2]
      // data[index + 7] = pal[3]

      // data[index + 2048] = pal[0]
      // data[index + 2049] = pal[1]
      // data[index + 2050] = pal[2]
      // data[index + 2051] = pal[3]

      // data[index + 2052] = pal[0]
      // data[index + 2053] = pal[1]
      // data[index + 2054] = pal[2]
      // data[index + 2055] = pal[3]
    }
  </script>
</div>